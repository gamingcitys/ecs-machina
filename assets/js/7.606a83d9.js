(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{202:function(t,e,n){"use strict";n.r(e);var a=n(0),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"component"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#component","aria-hidden":"true"}},[t._v("#")]),t._v(" Component")]),t._v(" "),n("p",[t._v('Components are the data of your game. They are "blocks" of related fields, on which the Systems will act. They are simple JavaScript objects that must implement the '),n("code",[t._v("BaseComponent")]),t._v(" interface. This interface makes sure that all your Components have a "),n("code",[t._v("_type")]),t._v(" property.")]),t._v(" "),n("h2",{attrs:{id:"the-type-s-role"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#the-type-s-role","aria-hidden":"true"}},[t._v("#")]),t._v(" The "),n("code",[t._v("_type")]),t._v("'s role")]),t._v(" "),n("p",[t._v("Components are simple JavaScript objects, which allow us to easily de/serialize them from/to JSON. But since Components are nothing more than objects (not class instances), ECS Machina uses the "),n("code",[t._v("_type")]),t._v(" property to differentiate them.")]),t._v(" "),n("h2",{attrs:{id:"defining-a-component"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#defining-a-component","aria-hidden":"true"}},[t._v("#")]),t._v(" Defining a Component")]),t._v(" "),n("p",[t._v("Efficiently declaring a Component can be done with those three elements:")]),t._v(" "),n("ul",[n("li",[t._v("The interface, extending "),n("code",[t._v("BaseComponent")])]),t._v(" "),n("li",[t._v("The "),n("code",[t._v("_type")]),t._v(" value (a unique string)")]),t._v(" "),n("li",[t._v("Optionally, a type guard function")])]),t._v(" "),n("p",[t._v("Example:")]),t._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" BaseComponent "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ecs-machina'")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * The interface extends BaseComponent, so it implicitely has the `_type` attribute\n */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BoxComponent")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BaseComponent")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v("\n  y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v("\n  width"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v("\n  height"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Take advantage of declaration merging to define the `_type` value\n */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" BoxComponent "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'BoxComponent'")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Type guard for BoxComponent\n */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isBoxComponent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("cmp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" BaseComponent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" cmp "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" BoxComponent "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cmp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_type "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" BoxComponent\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("Noticed how the "),n("code",[t._v("interface")]),t._v(" and the "),n("code",[t._v("const")]),t._v(" both have the same name ("),n("code",[t._v("BoxComponent")]),t._v(")?")]),t._v(" "),n("p",[t._v("It's a unique feature from TypeScript called \""),n("a",{attrs:{href:"https://www.typescriptlang.org/docs/handbook/declaration-merging.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Declaration Merging"),n("OutboundLink")],1),t._v('", that allows us to interchangeably use the same "name" as a value or a type, depending on the context.')])]),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("Even though the type guard is not really required, it can be quite useful. For example:")]),t._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" componentsList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" BaseComponent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**/")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" component "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" componentsList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isBoxComponent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// component is automatically typed as `BoxComponent | undefined`")]),t._v("\n")])])])]),t._v(" "),n("h2",{attrs:{id:"create-a-component"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-a-component","aria-hidden":"true"}},[t._v("#")]),t._v(" Create a Component")]),t._v(" "),n("p",[t._v("Since Components are simple objects, you just need to adhere to your previously declared interface.")]),t._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" BoxComponent "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./BoxComponent'")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" tiled"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" BoxComponent "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  _type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" BoxComponent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  width"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  height"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);